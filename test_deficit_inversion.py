"""
Test pour v√©rifier l'inversion du calcul de d√©ficit.
"""
import sys
from pathlib import Path
import pandas as pd

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent))

from src.core.manager import MaterialManager

def test_deficit_inversion():
    """Test pour v√©rifier que le d√©ficit est maintenant calcul√© comme Stock - Exploitation."""

    print("üß™ Test de l'inversion du calcul de d√©ficit")
    print("=" * 60)

    # Cr√©er des donn√©es d'exemple simples
    sample_data = pd.DataFrame({
        'NNO': ['ITEM001', 'ITEM002', 'ITEM003'],
        'MAG1-U': [10, 5, 15],     # Exploitation
        'MAG1-C': [8, 10, 12],     # Stock
    })

    print("üìä Donn√©es de test:")
    print("ITEM001: Exploitation=10, Stock=8  -> D√©ficit attendu = 8-10 = -2 (manque)")
    print("ITEM002: Exploitation=5,  Stock=10 -> D√©ficit attendu = 10-5 = +5 (surplus)")
    print("ITEM003: Exploitation=15, Stock=12 -> D√©ficit attendu = 12-15 = -3 (manque)")

    # Initialiser le manager et vider le cache
    manager = MaterialManager()
    manager.clear_cache()

    # Transformer et analyser
    transformed = manager.transformer.transform_to_long(sample_data)
    print(f"\nüìã Donn√©es transform√©es:")
    print(transformed.to_string(index=False))

    # Analyser les d√©ficits directement avec l'analyseur
    deficits_result = manager.deficit_analyzer.analyze_deficits(transformed)
    deficits_df = deficits_result.data

    print(f"\nüîç R√©sultats de l'analyse des d√©ficits:")
    print(deficits_df.to_string(index=False))

    print(f"\nüìà R√©sum√©:")
    summary = deficits_result.summary
    print(f"   Surplus de stock: {summary.get('surplus_stock_count', 0)} cas")
    print(f"   Manque de stock: {summary.get('manque_stock_count', 0)} cas")

    # V√©rifications
    print(f"\n‚úÖ V√©rifications:")

    # ITEM001: doit avoir d√©ficit = -2 (manque)
    item001_deficit = deficits_df[deficits_df['nomenclature'] == 'ITEM001']['deficit'].iloc[0]
    print(f"   ITEM001 d√©ficit: {item001_deficit} (attendu: -2)")
    assert item001_deficit == -2, f"Erreur: d√©ficit ITEM001 = {item001_deficit}, attendu -2"

    # ITEM002: doit avoir d√©ficit = +5 (surplus)
    item002_deficit = deficits_df[deficits_df['nomenclature'] == 'ITEM002']['deficit'].iloc[0]
    print(f"   ITEM002 d√©ficit: {item002_deficit} (attendu: +5)")
    assert item002_deficit == 5, f"Erreur: d√©ficit ITEM002 = {item002_deficit}, attendu +5"

    # ITEM003: doit avoir d√©ficit = -3 (manque)
    item003_deficit = deficits_df[deficits_df['nomenclature'] == 'ITEM003']['deficit'].iloc[0]
    print(f"   ITEM003 d√©ficit: {item003_deficit} (attendu: -3)")
    assert item003_deficit == -3, f"Erreur: d√©ficit ITEM003 = {item003_deficit}, attendu -3"

    print(f"\nüéâ Toutes les v√©rifications passent !")
    print(f"‚úÖ Le d√©ficit est maintenant calcul√© comme: Stock - Exploitation")
    print(f"   ‚Ä¢ D√©ficit positif = Surplus de stock")
    print(f"   ‚Ä¢ D√©ficit n√©gatif = Manque de stock")

if __name__ == "__main__":
    try:
        test_deficit_inversion()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()